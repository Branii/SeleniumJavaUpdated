import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

public class CanadaKeno implements Runnable {
	
	ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
	private int counter = 0;

	@Override
	public void run() {
		
		executor.scheduleAtFixedRate(() -> {
			
		DateFormat CanadaTime = new SimpleDateFormat("HH:mm:ss");
//        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
//		LocalDateTime currTime = LocalDateTime.now();
        CanadaTime.setTimeZone(TimeZone.getTimeZone("America/Vancouver"));
        Date zoneTime = new Date();
        String currentTime = CanadaTime.format(zoneTime);
       
        try {
            // Parsing input time in 24-hour format
            DateFormat inputFormat = new SimpleDateFormat("HH:mm:ss");
            Date date = inputFormat.parse(currentTime);
            
            // Formatting the parsed time into 12-hour format
            DateFormat outputFormat = new SimpleDateFormat("hh:mm:ss"); //
            String time12HourFormat = outputFormat.format(date);
            
            runKeno(time12HourFormat);
        } catch (ParseException e) {
            System.out.println("Invalid time format: " + e.getMessage());
        } catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
       
        
   
        
        }, 0, 1, TimeUnit.SECONDS);
		
	}

	
	public void runKeno(String CurrentTime) throws InterruptedException {
		
		  Map<String, String> timeValueMap = new HashMap<>();
	        for (String[] pair : new TimeSet().CanadaTime) {
	            timeValueMap.put(pair[0], pair[1]);
	        }
	        
	        String canadaTime = timeValueMap.get(CurrentTime);
	        
	        if(canadaTime != null) {
	        	
	        	try {
	        		
	        		System.out.print("Request new data: => " + CurrentTime);
		        	System.setProperty("webdriver.chrome.driver", "/usr/local/bin/chromedriver"); 
		    		ChromeOptions options = new ChromeOptions();
		    		options.addArguments("--headless");
		    		WebDriver driver = new ChromeDriver(options); 
		    		driver.get("https://www.playnow.com/keno/winning-numbers/");
		    	
		    		driver.findElement(By.className("keno__winning-numbers__controls__view__list")).click();
		            List<WebElement> Parent =  driver.findElements(By.className("keno__winning-numbers__results__draws__draw-result"));
		            WebElement childElement =  Parent.get(1);
		            WebElement drawNumberX =  childElement.findElement(By.className("keno__winning-numbers__results__draws__draw-result__list-numbers"));
		            WebElement drawPeriod =  childElement.findElement(By.className("keno__winning-numbers__results__draws__draw-result__draw-number"));
		            WebElement drawTimeX   =  childElement.findElement(By.className("keno__winning-numbers__results__draws__draw-result__draw-time"));
		            String[] splitData = drawNumberX.getText().split(" ");
		            
		            String commaSeparatedData = String.join(",", splitData);
		            String Period = drawPeriod.getAttribute("textContent").split(" ")[3];
		            String drawTime = drawTimeX.getAttribute("textContent").split(" ")[2];
		            
		            System.out.print("\nTimeSent: " + CurrentTime + " TimeGot: " + drawTime+"\n");
		                        
		            if(!drawTime.trim().equals(canadaTime.trim())) {
		            	 System.out.println("Retrying...");
		            	 counter++;
		                 try {
		                     // Close the existing driver before recursive call if it's open
		                     if (driver != null) {
		                         driver.close();
		                         driver.quit();
		                     }
		                     if(counter == 3) {
		                    	 System.out.println("Stopped for retrying");
		                    	 counter = 0;
		                    	 driver.close();
		                         driver.quit();
		                     }else {
		                    	 runKeno(CurrentTime); // Recursive call
		                     }
		                      
		                 } catch (Throwable t) {
		                     System.err.println("Error during retry: " + t.getMessage());
		                 }
		            }else {
		            	
			            System.out.print("DrawNumber: " + commaSeparatedData );
			            System.out.print("DrawPeriod: " + Period );
			            System.out.print("DrawTimers: " + drawTime );
			            
			             if (driver != null) {
	                         driver.close();
	                         driver.quit();
	                     }
			           
			            try {
			            	System.out.print("Sleeping ...");
							Thread.sleep(10000);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		            	
		            }
	        		
	        	}catch(Throwable t) {
	        		
	        		System.err.print(t.getMessage());
	        		
	        	}
	                       	
	        	
	   } // end of if statement
		
	}
}
